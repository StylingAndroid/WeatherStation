plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC7"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "jacoco"

android {
    compileSdkVersion 'Google Inc.:Google APIs:21'
    defaultConfig {
        applicationId "com.stylingandroid.weatherstation"
        minSdkVersion 24
        targetSdkVersion 28
        compileSdkVersion 'android-P'
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "API_KEY", "\"$openWeatherMapsApiKey\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        junitPlatform {
            details "none"
            jacocoOptions {
                html {
                    enabled true
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
    flavorDimensions "sdk"
    productFlavors {
        normal {
            dimension "sdk"
        }
        oreo {
            dimension "sdk"
            minSdkVersion 26
        }
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.2.51"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5"
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.preference:preference:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    implementation 'androidx.core:core-ktx:1.0.0-beta01'
    implementation 'androidx.fragment:fragment-ktx:1.0.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0-beta01'
    implementation "android.arch.navigation:navigation-fragment-ktx:1.0.0-alpha03"
    implementation "android.arch.navigation:navigation-ui-ktx:1.0.0-alpha03"
    implementation 'com.google.android.gms:play-services-location:15.0.1'
    implementation 'com.google.android.material:material:1.0.0-beta01'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    implementation 'com.google.dagger:dagger:2.16'
    implementation 'com.google.dagger:dagger-android-support:2.16'
    implementation "android.arch.persistence.room:runtime:1.1.1"
    kapt 'com.google.dagger:dagger-compiler:2.16'
    kapt "com.google.dagger:dagger-android-processor:2.16"
    kapt "android.arch.persistence.room:compiler:1.1.1"
    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.1.0'
    testImplementation 'org.threeten:threetenbp:1.3.3'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    testImplementation junit5.unitTests()
    androidTestOreoImplementation junit5.instrumentationTests()
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
    androidTestOreoImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestOreoImplementation 'androidx.test:rules:1.1.0-alpha3'
    androidTestOreoImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "junitPlatformTestNormalDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Module.*',
            '**/*ViewModel_Factory.*',
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class', // covers component implementations
            '**/Dagger*Component$**', // covers component implementations
            '**/Dagger*Component$Builder.class', // covers component builders
            '**/*Module_*Factory.class'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/javac/**/normalDebug/**/",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/normalDebug",
            excludes: excludes
    )

    // sources
    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])
    executionData = files("$buildDir/jacoco/*NormalDebug.exec")
}

detekt {
    version = "1.0.0.RC7"
    profile("main") {
        input = "$projectDir/src/main/java"
        config = "$projectDir/detekt.yml"
        output = "$project.buildDir/reports/detekt.xml"
        //outputFormat = "xml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

check.dependsOn detektCheck

